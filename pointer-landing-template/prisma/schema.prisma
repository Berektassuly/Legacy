generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  displayName String?
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  accounts    Account[]
  sessions    Session[]

  profile     Profile?
  memberships Membership[]
}

model Profile {
  id                String   @id @default(cuid())
  userId            String   @unique
  user              User     @relation(fields: [userId], references: [id])
  verificationLevel String   @default("none")
  primaryBrandId    String?
  primaryBrand      Brand?   @relation(fields: [primaryBrandId], references: [id])
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  memberships       Membership[]
}

model Brand {
  id            String   @id @default(cuid())
  name          String
  domain        String   @unique
  walletAddress String?
  status        String   @default("unverified")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  memberships   Membership[]
}

model Membership {
  id        String   @id @default(cuid())
  userId    String
  profileId String
  brandId   String
  role      String   @default("user")
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  profile Profile @relation(fields: [profileId], references: [id])
  brand   Brand   @relation(fields: [brandId], references: [id])

  @@unique([profileId, brandId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  access_token      String?
  refresh_token     String?
  expires_at        Int?
  token_type        String?
  scope             String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  entityType String
  entityId   String
  method     String
  token      String
  status     String   @default("pending")
  createdAt  DateTime @default(now())
  verifiedAt DateTime?
}
